<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">


    <display-name>essm</display-name>

    <!-- Spring ApplicationContext配置文件的路径,可使用通配符,多个路径用','号分隔
        此参数用于后面的Spring Context Loader -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:applicationContext.xml,
            classpath*:applicationContext-j2cache.xml,
            classpath*:applicationContext-mybatis.xml,
            classpath*:applicationContext-quartz.xml
        </param-value>
    </context-param>

    <context-param>
        <param-name>appconfig</param-name>
        <param-value>classpath:/appconfig.properties</param-value>
    </context-param>


    <!-- Filter 定义  -->
    <!-- Character Encoding filter -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- Filter 映射 -->
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- Spring监听器 Spring的ApplicationContext 载入 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- Spring 刷新Introspector防止内存泄露 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!-- 系统启动监听 默认：com.eryansky.common.web.listener.DefaultSystemInitListener -->
    <listener>
        <listener-class>com.eryansky.listener.SystemInitListener</listener-class>
    </listener>

    <!-- 可以使用RequestContextHolder.currentRequestAttributes() 获取到请求的attr -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>


    <filter>
        <filter-name>j2cache-session-filter</filter-name>
        <filter-class>com.eryansky.j2cache.session.J2CacheSessionFilter</filter-class>
        <init-param>
            <param-name>blackListURL</param-name> <!-- 配置黑名单url 表示走过滤器的url order：1-->
            <param-value>
                /static/**
            </param-value>
        </init-param>
        <init-param>
            <param-name>whiteListURL</param-name> <!-- 配置白名单url 表示走过滤器的url order：2-->
            <param-value>
                /**
            </param-value>
        </init-param>
        <init-param><!-- 内存中存放会话数 -->
            <param-name>session.maxSizeInMemory</param-name>
            <param-value>100000</param-value>
        </init-param>
        <init-param><!-- 会话有效期，单位：秒钟 -->
            <param-name>session.maxAge</param-name>
            <param-value>1800</param-value>
        </init-param>
        <!-- cookie configuration -->
        <init-param>
            <param-name>cookie.name</param-name>
            <param-value>J2CACHE_SESSION_ID</param-value>
            <!--<param-value>JSESSIONID</param-value>-->
        </init-param>
        <init-param>
            <param-name>cookie.path</param-name>
            <param-value></param-value>
        </init-param>
        <init-param>
            <param-name>cookie.domain</param-name>
            <param-value></param-value>
        </init-param>
        <!-- redis configuration -->
        <init-param>
            <param-name>redis.enabled</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>redis.mode</param-name>
            <param-value>single</param-value>
        </init-param>
        <init-param>
            <param-name>redis.hosts</param-name>
            <param-value>127.0.0.1:6379</param-value>
        </init-param>
        <init-param>
            <param-name>redis.channel</param-name>
            <param-value>j2cache-session</param-value>
        </init-param>
        <init-param>
            <param-name>redis.cluster_name</param-name>
            <param-value>j2cache-session</param-value>
        </init-param>
        <init-param>
            <param-name>redis.timeout</param-name>
            <param-value>2000</param-value>
        </init-param>
        <init-param>
            <param-name>redis.password</param-name>
            <param-value></param-value>
        </init-param>
        <init-param>
            <param-name>redis.database</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <param-name>redis.maxTotal</param-name>
            <param-value>100</param-value>
        </init-param>
        <init-param>
            <param-name>redis.maxIdle</param-name>
            <param-value>10</param-value>
        </init-param>
        <init-param>
            <param-name>redis.minIdle</param-name>
            <param-value>1</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>j2cache-session-filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 防止XSS注入-->
    <!--<filter>-->
    <!--<filter-name>XssFilter</filter-name>-->
    <!--<filter-class>com.eryansky.common.web.filter.XssFilter</filter-class>-->
    <!--<init-param>-->
    <!--<param-name>blackListURL</param-name> &lt;!&ndash; 配置黑名单url 表示走过滤器的url order：1&ndash;&gt;-->
    <!--<param-value>-->
    <!--/static/**-->
    <!--</param-value>-->
    <!--</init-param>-->
    <!--<init-param>-->
    <!--<param-name>whiteListURL</param-name> &lt;!&ndash; 配置白名单url 表示走过滤器的url order：2&ndash;&gt;-->
    <!--<param-value>-->
    <!--/**-->
    <!--</param-value>-->
    <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
    <!--<filter-name>XssFilter</filter-name>-->
    <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->




    <!-- 生产环境下使用 Response Header Added Filter -->
    <!--<filter>-->
    <!--<filter-name>expiresHeaderFilter</filter-name>-->
    <!--<filter-class>com.eryansky.common.web.filter.ResponseHeaderFilter</filter-class>-->
    <!--<init-param>-->
    <!--<param-name>Cache-Control</param-name>-->
    <!--<param-value>public, max-age=31536000</param-value>-->
    <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
    <!--<filter-name>expiresHeaderFilter</filter-name>-->
    <!--<url-pattern>/static/*</url-pattern>-->
    <!--</filter-mapping>-->


    <!-- ehcache Gzip过滤器 -->
    <filter>
        <filter-name>gzipFilter</filter-name>
        <filter-class>com.eryansky.common.web.filter.gzip.GZIPFilter</filter-class>
        <init-param>
            <param-name>whiteListURL</param-name> <!-- 配置白名单url 表示走过滤器的url order：2-->
            <param-value>
                /static/**
            </param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.css</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.js</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.png</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.jpg</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.gif</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*.json</url-pattern>
    </filter-mapping>

    <!-- SiteMesh -->
    <filter>
        <filter-name>sitemeshFilter</filter-name>
        <filter-class>com.eryansky.core.web.filter.MySiteMeshFilter</filter-class>
        <init-param>
            <param-name>blackListURL</param-name> <!-- 配置黑名单url 表示走过滤器的url order：1-->
            <param-value>
                /static/**
            </param-value>
        </init-param>
        <init-param>
            <param-name>whiteListURL</param-name> <!-- 配置白名单url 表示走过滤器的url order：2-->
            <param-value>
                /**
            </param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>sitemeshFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>CustomHttpServletRequestFilter</filter-name>
        <filter-class>com.eryansky.common.web.filter.CustomHttpServletRequestFilter</filter-class>
        <init-param>
            <param-name>whiteListURL</param-name> <!-- 配置白名单url 表示走过滤器的url order：2-->
            <param-value>
                /a/proxy**
                /a/proxy/**
            </param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CustomHttpServletRequestFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- Spring MVC -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:/applicationContent-mvc*.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- DruidStatView -->
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
        <init-param>
            <!-- 允许清空统计数据 -->
            <param-name>resetEnable</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <!-- 用户名 -->
            <param-name>loginUsername</param-name>
            <param-value>druid</param-value>
        </init-param>
        <init-param>
            <!-- 密码 -->
            <param-name>loginPassword</param-name>
            <param-value>password</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>/static/*,/servlet/*,/userfiles/*,/common/*,*.jsp,*.js,*.svg,*.ttf,*.htm,*.html,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
        <init-param>
            <param-name>principalSessionName</param-name>
            <param-value>loginUser</param-value>
        </init-param>
        <init-param>
            <param-name>profileEnable</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>sessionStatMaxCount</param-name>
            <param-value>8192</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 本地静态内容展示与下载的Servlet -->
    <servlet>
        <servlet-name>StaticContentServlet</servlet-name>
        <servlet-class>com.eryansky.common.web.servlet.StaticContentServlet</servlet-class>
        <init-param>
            <param-name>cacheChannel</param-name>
            <param-value>cacheChannel</param-value>
        </init-param>
        <init-param>
            <param-name>cacheKey</param-name>
            <param-value>contentInfoCache</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>StaticContentServlet</servlet-name>
        <url-pattern>/servlet/StaticContentServlet</url-pattern>
    </servlet-mapping>

    <!-- 获取远程静态内容并进行展示的Servlet -->
    <servlet>
        <servlet-name>RemoteContentServlet</servlet-name>
        <servlet-class>com.eryansky.common.web.servlet.RemoteContentServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RemoteContentServlet</servlet-name>
        <url-pattern>/servlet/RemoteContentServlet</url-pattern>
    </servlet-mapping>

    <!-- Servlet 验证码 -->
    <servlet>
        <servlet-name>ValidateCodeServlet</servlet-name>
        <servlet-class>com.eryansky.common.web.servlet.ValidateCodeServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ValidateCodeServlet</servlet-name>
        <url-pattern>/servlet/ValidateCodeServlet</url-pattern>
    </servlet-mapping>

    <!--hightcharts导出下载功能-->
    <servlet>
        <servlet-name>DownloadChartServlet</servlet-name>
        <servlet-class>com.eryansky.common.web.servlet.DownloadChartServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DownloadChartServlet</servlet-name>
        <url-pattern>/servlet/DownloadChartServlet</url-pattern>
    </servlet-mapping>

    <!-- 配置静态资源不经过spring mvc -->
    <servlet>
        <servlet-name>default</servlet-name>
        <init-param>
            <param-name>fileEncoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/static/*</url-pattern>
    </servlet-mapping>

    <!-- session超时定义,单位为分钟 -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
    <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>

    <!-- 出错页面定义 -->
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/common/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/common/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/common/404.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/common/403.jsp</location>
    </error-page>

    <!--标签tag-->
    <jsp-config>
        <taglib>
            <taglib-uri>/essm-tags</taglib-uri>
            <taglib-location>/WEB-INF/tlds/es.tld</taglib-location>
        </taglib>
    </jsp-config>

    <!--Android下载支持（非必要） 指定ContentType即可：application/vnd.android.package-archive-->
    <mime-mapping>
        <extension>apk</extension>
        <mime-type>application/vnd.android.package-archive</mime-type>
    </mime-mapping>

    <!-- jndi数据源配置 -->
    <!-- 
	<resource-ref>  
		<description>jndi数据源</description>  
		<res-ref-name>jdbc/mysql</res-ref-name>  
		<res-type>javax.sql.DataSource</res-type>  
		<res-auth>Container</res-auth>  
	</resource-ref>  
     -->
    <!--集群-->
    <distributable/>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>securedapp</web-resource-name>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
            <!--<transport-guarantee>CONFIDENTIAL</transport-guarantee>-->
        </user-data-constraint>
    </security-constraint>
</web-app>
