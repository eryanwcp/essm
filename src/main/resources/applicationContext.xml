<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jee="http://www.springframework.org/schema/jee"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
        default-autowire="byName" default-lazy-init="false">

    <description>spring基础配置</description>

    <!-- 定义受环境影响易变的变量 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:/appconfig.properties,classpath*:/config.properties" />

    <!-- 提供对@Required,@Autowired以及JSR 250'的@Resource注解的支持 -->
    <context:annotation-config />

    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <context:component-scan base-package="com.eryansky.common.orm.jdbc,com.eryansky.modules.**.service" />

    <!-- 1.jndi数据源 -->
    <!-- <jee:jndi-lookup id="dataSource" jndi-name="${jndi.name}" /> -->

    <!-- 2.DBCP数据源 数据源配置,使用应用内的DBCP数据库连接池 -->
    <bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="initialSize" value="20" />
        <property name="maxActive" value="500" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="defaultAutoCommit" value="false" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>
    <bean id="dataSource" class="com.eryansky.common.datasource.DynamicDataSource">
        <property name="defaultTargetDataSource" ref="defaultDataSource"/>
        <property name="targetDataSources">
            <map>
                <!-- 注意这里的value是和上面的DataSource的id对应，key要和下面的DataSourceContextHolder中的常量对应 -->
                <entry value-ref="defaultDataSource" key="defaultDataSource"/>
            </map>
        </property>
    </bean>

    <!-- JDBC配置 -->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> -->
    <!--<property name="dataSource">-->
    <!--<ref bean="dataSource"/>-->
    <!--</property> -->
    <!--</bean>-->

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="defaultDataSource" />
    </bean>

    <!-- 1.使用annotation定义事务 -->
    <!-- proxy-target-class ture:动态代理(需cglib类库的支持)  false:接口(Spring默认方式) -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="200"/>

    <!-- proxy-target-class true:CGLIB代理 false:JDK代理-->
    <aop:aspectj-autoproxy proxy-target-class="true" />


    <!-- 2.声明式事务配置 -->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.eryansky.modules..*.service..*Service.*(..))" advice-ref="txAdvice" order="199"/>
    </aop:config>

    <!-- 通知  默认事务管理器：transaction-manager="transactionManager" -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="load*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="search*" read-only="true" />
            <tx:method name="is*" read-only="true" />
            <tx:method name="count*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <!--druid监控Spring-->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.eryansky.modules.sys..*.service.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <!--Spring上下文获取工具-->
    <bean class="com.eryansky.common.spring.SpringContextHolder"></bean>
    <!--安全日志拦截切面-->
    <bean name="securityLogAspect" class="com.eryansky.modules.sys.aop.SecurityLogAspect"></bean>

    <!-- 配置 JSR303 Bean Validator 定义 -->
    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:messages</value>
                <value>classpath:org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>

    <!--本地磁盘存储 非集群环境使用-->
    <bean id="iFileManager" class="com.eryansky.modules.disk.extend.DISKManager"></bean>


    <!--企业微信号配置-->
    <bean id="qyapiConfig" class="com.eryansky.fastweixin.company.api.config.ClusterQYAPIConfig">
        <constructor-arg name="corpid" value="${weixin.cropId}"></constructor-arg>
        <constructor-arg name="corpsecret" value="${weixin.corpSecret}"></constructor-arg>
        <constructor-arg name="enableJsApi" value="${weixin.enableJsApi}"></constructor-arg>
    </bean>
</beans>